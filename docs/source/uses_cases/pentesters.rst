For Pentesters
==============

Track API Session and export to BurpSuite / OWASP ZAP
-----------------------------------------------------

Some times is useful store the browsing navigation for an specific API. Yes, you can do that using **BurpSuite**, **OWASP ZAP** or any other similar software.

But these software stores the navigation in their own format. You haven't a standard format where the navigation is stored.

``API-Check`` proxy stores the browsing navigation in a standard Relational database (MySQL, PostgresSQL, SQLite...) so you can:

- Find any information using standard SQL Syntax or using any DB Browser.
- Re-inject the stored traffic to another tool.

For this example we focus into the second case:

.. image:: /_static/images/reinject_to_security_tool.png

**1 - Launch the proxy**

To perform that we first must launch ``API-Check`` :doc:`proxy </tools/proxy>` an record a new session:

.. code-block:: console

    > at-proxy -C sqlite:///browsing_reinject.sqlite3

At proxy starts, it displays the **API Version ID** that automatically are generated for that browsing. You must keep it for next step.

When you finish browsing, then press :  samp:`CTRL+C` to stop.

**2 - Send browsing data to security tool**

At this point ``API-Check`` was stored in the the **browsing_reinject.sqlite3** the session. Now, with the **API Version ID** we can re-inject the data to the security tool:

.. code-block:: console

    > ac-dbcat sqlite:///browsing_reinject.sqlite3 | at-sendto --proxy 127.0.0.1:9000


Tracking API versions
---------------------

``API-Check`` allows to track API Versions. It offers two ways to track them:

- Using Proxy: each time proxy starts creates a new unique version from domain and end-points. This version will be the same if the End-points and the server is the same.
- Using OpenAPI 3: You can load an API definition from OpenAPI 3. ``API-Check`` tracks the version from the definition version.

Once you have the definitions, ``API-Check`` permits check API versions and history.


.. image:: /_static/images/api_versions.png
   :align: center

To check the versions you can use action :samp:`apis` from ::samp:`manage` tool:

.. code-block:: console

    > at-manage apis


Random fuzzing using OpenAPI definition
---------------------------------------

By default, the tool *sendproxy*, load an API definition and build the queries using pseudorandom tests that folloing the definition types.

You can "fill" an external tool with requests that uses this definition.

.. image:: /_static/images/api_definition.png
   :align: center
   :scale: 80%


SQL Injection attack check using API definition
-----------------------------------------------


User Enumeration using API definition
-------------------------------------


Weak password check using parametrized fuzzing
----------------------------------------------

